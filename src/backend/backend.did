type Proposal = record {
  id : nat64;
  title : text;
  submitter_eth_address : text;
  submitter : text;
  yes_votes : nat;
  is_open : bool;
  is_executed: bool;
  description : text;
  proposal_start_timestamp : nat64;
  proposal_end_timestamp : nat64;  
  no_votes : nat;
  block_height : text;
  proposal_type : text;
  eth_transaction_hash : opt text;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : UserProfile; Err : text };
type Result_2 = variant { Ok : vec record { text; UserProfile }; Err : text };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok: nat64; Err: text };
type UserProfile = record { avatar_url : text; name : text; address : text };
service : (text) -> {
  execute_proposal : (nat64) -> (Result);
  get_eth_address : () -> (text);
  get_my_eth_balance : () -> (text);
  get_my_profile : () -> (Result_1) query;
  get_proposals : () -> (vec Proposal) query;
  list_profiles : () -> (Result_2) query;
  save_my_profile : (text, text) -> (Result_1);
  submit_proposal : (text, text, text, nat64) -> (nat64);
  vote_on_proposal : (nat64, bool) -> (Result_3);
  clear_closed_proposals: () -> (Result_4);
  clear_proposal_by_id: (nat64) -> (Result);
}

